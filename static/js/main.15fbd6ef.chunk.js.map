{"version":3,"sources":["components/register/register.jsx","components/common/navbar.jsx","App.js","components/HOC/protectedRoutes.js","serviceWorker.js","index.js"],"names":["Select","Option","Layout","Header","Content","Footer","App","Component","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"myEAaqBA,IAAXC,O,6CCP0BC,IAA5BC,OAA4BD,IAApBE,QAAoBF,IAAXG,O,yDCkBVC,GCpBeC,YDMlB,WACV,OACE,kBAAC,IAAMC,SAAP,QEAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAEL,kBAAC,IAAD,KACG,kBAAC,EAAD,OAGLC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.15fbd6ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    Form, \r\n    Input,\r\n    Tooltip,\r\n    Select,\r\n    Button,\r\n  } from 'antd';\r\n  import { QuestionCircleOutlined } from '@ant-design/icons';\r\n  import \"./register.scss\";\r\n\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 16 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 16,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n// Registration page start from here \r\n\r\n\r\nconst Register = (props) => {\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    // Putting all data on Local storage \r\n    const onFinish = values => {\r\n      localStorage.setItem(\"values\",JSON.stringify(values));\r\n      localStorage.setItem('auhenticate',\"\");\r\n      props.history.push('./login');\r\n    };\r\n  \r\n    const prefixSelector = (\r\n        \r\n      <Form.Item name=\"prefix\" noStyle>\r\n        <Select style={{ width: 70 }}>\r\n          <Option value=\"86\">+92</Option>\r\n          <Option value=\"87\">+91</Option>\r\n        </Select>\r\n      </Form.Item>\r\n    );\r\n  \r\n    return ( \r\n    <div id=\"myForm\">\r\n    \r\n    <Form\r\n      {...formItemLayout}\r\n      form={form}\r\n      name=\"register\"\r\n      onFinish={onFinish}\r\n      scrollToFirstError\r\n    >\r\n\r\n    <Form.Item\r\n        name=\"nickname\"\r\n        label={\r\n          <span>\r\n            Name&nbsp;\r\n            <Tooltip title=\"Your Origional Name\">\r\n              <QuestionCircleOutlined />\r\n            </Tooltip>\r\n          </span>\r\n        }\r\n        rules={[{ required: true, message: 'Please input your Name!', whitespace: true }]}\r\n      >\r\n    <Input/>\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"email\"\r\n        label=\"E-mail\"\r\n        rules={[\r\n          {\r\n            type: 'email',\r\n            message: 'The input is not valid E-mail!',\r\n          },\r\n          {\r\n            required: true,\r\n            message: 'Please input your E-mail!',\r\n          },\r\n        ]}\r\n      >\r\n    <Input/>\r\n    </Form.Item>\r\n      <Form.Item\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input your password!',\r\n          },\r\n        ]}\r\n        hasFeedback\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n\r\n      <Form.Item\r\n        name=\"confirm\"\r\n        label=\"Confirm Password\"\r\n        dependencies={['password']}\r\n        hasFeedback\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please confirm your password!',\r\n          },\r\n          ({ getFieldValue }) => ({\r\n            validator(rule, value) {\r\n              if (!value || getFieldValue('password') === value) {\r\n                return Promise.resolve();\r\n              }\r\n              return Promise.reject('The two passwords that you entered do not match!');\r\n            },\r\n          }),\r\n        ]}\r\n      > \r\n        <Input.Password />\r\n      </Form.Item>\r\n     \r\n\r\n      <Form.Item\r\n        name=\"phone\"\r\n        label=\"Phone Number\"\r\n        rules={[{ required: true, message: 'Please input your phone number!' }]}\r\n      >\r\n        <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"agreement\"\r\n        valuePropName=\"checked\"\r\n        \r\n        {...tailFormItemLayout}\r\n      >\r\n       \r\n          Do you have already Account! <Link to=\"./login\">Login</Link>\r\n       \r\n      </Form.Item>\r\n      <Form.Item {...tailFormItemLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Register\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n    </div> );\r\n}\r\n \r\nexport default Register;","import React from 'react';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport TableComponent from './tableComponent';\r\nimport {Link} from \"react-router-dom\"\r\nimport \"./navbar.scss\"\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\n// Component Start from here \r\nconst Navbar = () => {\r\n\r\n  let values=localStorage.getItem('values');\r\n  let mName1=JSON.parse(values);\r\n    return ( \r\n    <div>\r\n  <Layout className=\"layout\">\r\n\r\n    {/* Header Area start from here  */}\r\n    <Header>\r\n      <div className=\"logo\" />\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n      <Menu.Item key=\"1\" style={{color:'white',fontWeight:'700', fontSize:'20px'}}>{mName1.nickname}</Menu.Item>\r\n      <Menu.Item key=\"2\"><Link to=\"./\">Home</Link></Menu.Item>\r\n      <Menu.Item key=\"3\"> <Link to=\"./login\">Login</Link></Menu.Item>\r\n      <Menu.Item key=\"4\"><Link to =\"./register\">Register</Link></Menu.Item>\r\n      <Menu.Item key=\"5\"><Link to=\"./logout\">Logout</Link></Menu.Item>\r\n\r\n      </Menu>\r\n    </Header>\r\n    <Content style={{ padding: '0 50px' }}>\r\n      <Breadcrumb style={{ margin: '16px 0' }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n    <div className=\"site-layout-content\">\r\n    <TableComponent/>\r\n    \r\n\r\n    </div>\r\n    </Content>\r\n    {/* Footer Area   */}\r\n    <Footer style={{ textAlign: 'center' }}>Â©2020 Developed by {mName1.nickname} </Footer>\r\n  </Layout>\r\n    </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;\r\n\r\n// Componend End here ","import React from 'react';\r\nimport Login from './components/login/login'\r\nimport {ToastContainer} from 'react-toastify';\r\nimport Register from './components/register/register';\r\nimport Navbar from \"./components/common/navbar\";\r\nimport {Switch,Route,Redirect} from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Logout from \"./components/logout/logout\";\r\nimport ProtectedRoutes from './components/HOC/protectedRoutes';\r\n\r\nconst App = () => {\r\n  return ( \r\n    <React.Fragment>\r\n      {/* <ToastContainer/>\r\n      <Switch>\r\n        <ProtectedRoutes path='/' component={Navbar} exact={true}/>\r\n        <Route path=\"/login\" component={Login}/>\r\n        <Route path=\"/register\" component={Register} />\r\n        <Route path=\"/logout\" component={Logout} />\r\n        <Redirect from='/' exact to=\"/navbar\"/>\r\n      </Switch> */}\r\n    </React.Fragment> );\r\n}\r\n \r\nexport default App;\r\n\r\n\r\n\r\n    \r\n\r\n\r\n","import React,{Component} from 'react';\r\nimport { Redirect} from 'react-router-dom';\r\n\r\n// Higher Order Component \r\nclass ProtectedRoutes extends Component {\r\n    state = {  }\r\n    render() { \r\n        const Component1=this.props.component;\r\n        const user=localStorage.getItem('auhenticate');\r\n\r\n// Transform the component and return back \r\n        return user?( <Component1/> ):(<Redirect to={{pathname:'/login'}}/>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ProtectedRoutes;\r\n\r\n//  End here--","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'core-js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <BrowserRouter>\n       <App />\n    </BrowserRouter>,\n  /* </React.StrictMode>, */\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}